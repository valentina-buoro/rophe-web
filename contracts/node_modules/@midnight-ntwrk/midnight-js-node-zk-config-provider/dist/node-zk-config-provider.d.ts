import type { ProverKey, VerifierKey, ZKIR } from '@midnight-ntwrk/midnight-js-types';
import { ZKConfigProvider } from '@midnight-ntwrk/midnight-js-types';
/**
 * Implementation of {@link ZKConfigProvider} that reads the keys and zkIR from the local filesystem.
 * @typeParam K - The type of the circuit ID used by the provider.
 */
export declare class NodeZkConfigProvider<K extends string> extends ZKConfigProvider<K> {
    readonly directory: string;
    /**
     * @param directory The path to the base directory containing the key and ZKIR subdirectories.
     */
    constructor(directory: string);
    /**
     * Reads a file from the local filesystem.
     * @param subDir The subdirectory of the base-directory to read from.
     * @param circuitId The circuit ID corresponding to the file to read.
     * @param ext The file extension of the file to read.
     * @private
     */
    private readFile;
    /**
     * {@link ZKConfigProvider.getProverKey}
     */
    getProverKey(circuitId: K): Promise<ProverKey>;
    /**
     * {@link ZKConfigProvider.getVerifierKey}
     */
    getVerifierKey(circuitId: K): Promise<VerifierKey>;
    /**
     * {@link ZKConfigProvider.getZKIR}
     */
    getZKIR(circuitId: K): Promise<ZKIR>;
}
//# sourceMappingURL=node-zk-config-provider.d.ts.map