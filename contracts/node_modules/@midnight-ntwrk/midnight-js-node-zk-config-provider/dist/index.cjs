'use strict';

var midnightJsTypes = require('@midnight-ntwrk/midnight-js-types');
var fs = require('fs/promises');
var path = require('path');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var fs__namespace = /*#__PURE__*/_interopNamespaceDefault(fs);
var path__namespace = /*#__PURE__*/_interopNamespaceDefault(path);

/**
 * The name of the directory containing proving and verifying keys.
 */
const KEY_DIR = 'keys';
/**
 * File extension for proving keys.
 */
const PROVER_EXT = '.prover';
/**
 * File extension for verifying keys.
 */
const VERIFIER_EXT = '.verifier';
/**
 * The name of the directory containing zkIRs.
 */
const ZKIR_DIR = 'zkir';
/**
 * File extension for zkIRs.
 */
const ZKIR_EXT = '.bzkir';
/**
 * Implementation of {@link ZKConfigProvider} that reads the keys and zkIR from the local filesystem.
 * @typeParam K - The type of the circuit ID used by the provider.
 */
class NodeZkConfigProvider extends midnightJsTypes.ZKConfigProvider {
    directory;
    /**
     * @param directory The path to the base directory containing the key and ZKIR subdirectories.
     */
    constructor(directory) {
        super();
        this.directory = directory;
    }
    /**
     * Reads a file from the local filesystem.
     * @param subDir The subdirectory of the base-directory to read from.
     * @param circuitId The circuit ID corresponding to the file to read.
     * @param ext The file extension of the file to read.
     * @private
     */
    readFile(subDir, circuitId, ext) {
        return fs__namespace.readFile(path__namespace.join(this.directory, subDir, circuitId + ext));
    }
    /**
     * {@link ZKConfigProvider.getProverKey}
     */
    getProverKey(circuitId) {
        return this.readFile(KEY_DIR, circuitId, PROVER_EXT).then(midnightJsTypes.createProverKey);
    }
    /**
     * {@link ZKConfigProvider.getVerifierKey}
     */
    getVerifierKey(circuitId) {
        return this.readFile(KEY_DIR, circuitId, VERIFIER_EXT).then(midnightJsTypes.createVerifierKey);
    }
    /**
     * {@link ZKConfigProvider.getZKIR}
     */
    getZKIR(circuitId) {
        return this.readFile(ZKIR_DIR, circuitId, ZKIR_EXT).then(midnightJsTypes.createZKIR);
    }
}

exports.NodeZkConfigProvider = NodeZkConfigProvider;
//# sourceMappingURL=index.cjs.map
