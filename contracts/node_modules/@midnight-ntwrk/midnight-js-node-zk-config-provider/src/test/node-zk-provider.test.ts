import * as crypto from 'crypto';

import type { BinaryLike } from 'crypto';
import { NodeZkConfigProvider } from '../index';

const createHash = (binaryLike: BinaryLike): string => {
  return crypto.createHash('sha256').update(binaryLike).digest().toString('base64');
};

describe('Node ZK config Provider', () => {
  const resourceDir = `${process.cwd()}/src/test/resources`;
  const PROVER_KEY_HASH = 'DnbPkv3mY0+nHwt3NGuaWlMRC+2QhtG+COdhjFd0xB8=';

  test('reads prover key correctly', async () => {
    const proverKey = await new NodeZkConfigProvider(resourceDir).getProverKey('set_topic');
    expect(createHash(proverKey)).toEqual(PROVER_KEY_HASH);
  });

  const VERIFIER_KEY_HASH = 'sbTZdCx3Kz4RA5OUSaBg2+WZupNdCwd13XmQV9j4pd4=';

  test('reads verifier key correctly', async () => {
    const verifierKey = await new NodeZkConfigProvider(resourceDir).getVerifierKey('set_topic');
    expect(createHash(verifierKey)).toEqual(VERIFIER_KEY_HASH);
  });

  const ZKIR_HASH = 'CW4hEb7fRkPiS85+l0/kvN+6IbISWJycOrwW5Jn+AI0=';

  test('reads ZKIR correctly', async () => {
    const zkProvider = await new NodeZkConfigProvider(resourceDir).getZKIR('set_topic');
    expect(createHash(zkProvider)).toEqual(ZKIR_HASH);
  });

  test('throws on relative path', async () => {
    await expect(async () =>
      new NodeZkConfigProvider('.').getVerifierKey('set_topic')
    ).rejects.toThrowError("ENOENT: no such file or directory, open 'keys/set_topic.verifier'");
  });
});
