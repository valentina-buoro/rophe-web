import type { ProofProvider, UnprovenTransaction, ZKConfig } from '@midnight-ntwrk/midnight-js-types';
/**
 * Serializes a {@link ZKConfig} using Borsh format.
 *
 * @param zkConfig The configuration to serialize.
 */
export declare const serializeZKConfig: <K extends string>(zkConfig?: ZKConfig<K>) => Uint8Array;
/**
 * Creates a serialized proving server payload from the given transaction and
 * ZK configuration.
 *
 * @param unprovenTx The transaction being proven.
 * @param zkConfig The ZK artifacts needed to prove the transaction. Undefined
 *                 if a deployment transaction is being proven.
 */
export declare const serializePayload: <K extends string>(unprovenTx: UnprovenTransaction, zkConfig?: ZKConfig<K>) => Promise<ArrayBuffer>;
/**
 * The default configuration for the proof server client.
 */
export declare const DEFAULT_CONFIG: {
    /**
     * The default timeout for prove requests.
     */
    timeout: number;
    /**
     * The default ZK configuration to use. It is overwritten with a proper ZK
     * configuration only if a call transaction is being proven.
     */
    zkConfig: undefined;
};
/**
 * Creates a {@link ProofProvider} by creating a client for a running proof server.
 * Allows for HTTP and HTTPS. The data passed to 'proveTx' are intended to be
 * secret, so usage of this function should be heavily scrutinized.
 *
 * @param url The url of a running proof server.
 */
export declare const httpClientProofProvider: <K extends string>(url: string) => ProofProvider<K>;
//# sourceMappingURL=http-client-proof-provider.d.ts.map