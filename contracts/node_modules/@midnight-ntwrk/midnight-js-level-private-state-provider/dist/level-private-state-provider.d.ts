import type { PrivateStateProvider, PrivateStateId } from '@midnight-ntwrk/midnight-js-types';
/**
 * The default name of the indexedDB database for Midnight.
 */
export declare const MN_LDB_DEFAULT_DB_NAME = "midnight-level-db";
/**
 * The default name of the private state store.
 */
export declare const MN_LDB_DEFAULT_PRIS_STORE_NAME = "private-states";
/**
 * The default name of the signing key store.
 */
export declare const MN_LDB_DEFAULT_KEY_STORE_NAME = "signing-keys";
/**
 * Optional properties for the indexedDB based private state provider configuration.
 */
export interface LevelPrivateStateProviderConfig {
    /**
     * The name of the LevelDB database used to store all Midnight related data.
     */
    readonly midnightDbName: string;
    /**
     * The name of the object store containing private states.
     */
    readonly privateStateStoreName: string;
    /**
     * The name of the object store containing signing keys.
     */
    readonly signingKeyStoreName: string;
}
/**
 * The default configuration for the level database.
 */
export declare const DEFAULT_CONFIG: {
    /**
     * The name of the database.
     */
    midnightDbName: string;
    /**
     * The name of the "level" on which to store private state.
     */
    privateStateStoreName: string;
    /**
     * The name of the "level" on which to store signing keys.
     */
    signingKeyStoreName: string;
};
/**
 * Constructs an instance of {@link PrivateStateProvider} based on {@link Level} database.
 *
 * @param partialConfig Database configuration options.
 */
export declare const levelPrivateStateProvider: <PSI extends PrivateStateId, PS = any>(partialConfig?: Partial<LevelPrivateStateProviderConfig>) => PrivateStateProvider<PSI, PS>;
//# sourceMappingURL=level-private-state-provider.d.ts.map