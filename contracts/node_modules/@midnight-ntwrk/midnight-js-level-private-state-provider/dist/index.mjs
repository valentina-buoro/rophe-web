import { Buffer } from 'buffer';
import { Level } from 'level';
import _ from 'lodash';
import * as superjson from 'superjson';

/**
 * The default name of the indexedDB database for Midnight.
 */
const MN_LDB_DEFAULT_DB_NAME = 'midnight-level-db';
/**
 * The default name of the private state store.
 */
const MN_LDB_DEFAULT_PRIS_STORE_NAME = 'private-states';
/**
 * The default name of the signing key store.
 */
const MN_LDB_DEFAULT_KEY_STORE_NAME = 'signing-keys';
/**
 * The default configuration for the level database.
 */
const DEFAULT_CONFIG = {
    /**
     * The name of the database.
     */
    midnightDbName: MN_LDB_DEFAULT_DB_NAME,
    /**
     * The name of the "level" on which to store private state.
     */
    privateStateStoreName: MN_LDB_DEFAULT_PRIS_STORE_NAME,
    /**
     * The name of the "level" on which to store signing keys.
     */
    signingKeyStoreName: MN_LDB_DEFAULT_KEY_STORE_NAME
};
superjson.registerCustom({
    isApplicable: (v) => v instanceof Buffer,
    serialize: (v) => v.toString('hex'),
    deserialize: (v) => Buffer.from(v, 'hex')
}, 'buffer');
const withSubLevel = async (dbName, levelName, thunk) => {
    const level = new Level(dbName, {
        createIfMissing: true
    });
    const subLevel = level.sublevel(levelName, {
        valueEncoding: {
            encode: superjson.stringify,
            decode: superjson.parse,
            name: 'super-json-values'
        }
    });
    try {
        await level.open();
        await subLevel.open();
        return await thunk(subLevel);
    }
    finally {
        await subLevel.close();
        await level.close();
    }
};
const subLevelMaybeGet = (dbName, levelName, key) => {
    return withSubLevel(dbName, levelName, async (subLevel) => {
        const value = await subLevel.get(key);
        // We convert undefined values to null because we use undefined for contracts without private
        // state, and we want to be able to distinguish private states that are undefined but present
        // from private states that are not present at all.
        if (value === undefined) {
            return null;
        }
        return value;
    });
};
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Constructs an instance of {@link PrivateStateProvider} based on {@link Level} database.
 *
 * @param partialConfig Database configuration options.
 */
const levelPrivateStateProvider = (partialConfig = {}) => {
    const config = _.defaults(partialConfig, DEFAULT_CONFIG);
    return {
        get(privateStateId) {
            return subLevelMaybeGet(config.midnightDbName, config.privateStateStoreName, privateStateId);
        },
        remove(privateStateId) {
            return withSubLevel(config.midnightDbName, config.privateStateStoreName, (subLevel) => subLevel.del(privateStateId));
        },
        set(privateStateId, state) {
            return withSubLevel(config.midnightDbName, config.privateStateStoreName, (subLevel) => subLevel.put(privateStateId, state));
        },
        clear() {
            return withSubLevel(config.midnightDbName, config.privateStateStoreName, (subLevel) => subLevel.clear());
        },
        getSigningKey(address) {
            return subLevelMaybeGet(config.midnightDbName, config.signingKeyStoreName, address);
        },
        removeSigningKey(address) {
            return withSubLevel(config.midnightDbName, config.signingKeyStoreName, (subLevel) => subLevel.del(address));
        },
        setSigningKey(address, signingKey) {
            return withSubLevel(config.midnightDbName, config.signingKeyStoreName, (subLevel) => subLevel.put(address, signingKey));
        },
        clearSigningKeys() {
            return withSubLevel(config.midnightDbName, config.signingKeyStoreName, (subLevel) => subLevel.clear());
        }
    };
};

export { DEFAULT_CONFIG, levelPrivateStateProvider };
//# sourceMappingURL=index.mjs.map
