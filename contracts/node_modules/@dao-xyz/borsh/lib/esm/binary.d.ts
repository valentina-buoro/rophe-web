import { PrimitiveType, SmallIntegerType } from "./types.js";
export declare class BinaryWriter {
    totalSize: number;
    private _writes;
    private _writesTail;
    private _buf;
    constructor();
    bool(value: boolean): void;
    static bool(value: boolean, writer: BinaryWriter): void;
    u8(value: number): void;
    static u8(value: number, writer: BinaryWriter): void;
    u16(value: number): void;
    static u16(value: number, writer: BinaryWriter): void;
    u32(value: number): void;
    static u32(value: number, writer: BinaryWriter): void;
    u64(value: number | bigint): void;
    static u64(value: number | bigint, writer: BinaryWriter): void;
    u128(value: number | bigint): void;
    static u128(value: number | bigint, writer: BinaryWriter): void;
    u256(value: number | bigint): void;
    static u256(value: number | bigint, writer: BinaryWriter): void;
    u512(value: number | bigint): void;
    static u512(value: number | bigint, writer: BinaryWriter): void;
    f32(value: number): void;
    static f32(value: number, writer: BinaryWriter): void;
    f64(value: number): void;
    static f64(value: number, writer: BinaryWriter): void;
    string(str: string): void;
    static string(str: string, writer: BinaryWriter): void;
    static stringCustom(str: string, writer: BinaryWriter, lengthWriter?: (len: number | bigint, buf: Uint8Array, offset: number) => void, lengthSize?: number): void;
    set(array: Uint8Array): void;
    uint8Array(array: Uint8Array): void;
    static uint8Array(array: Uint8Array, writer: BinaryWriter): void;
    static uint8ArrayCustom(array: Uint8Array, writer: BinaryWriter, lengthWriter?: (len: number | bigint, buf: Uint8Array, offset: number) => void, lengthSize?: number): void;
    static uint8ArrayFixed(array: Uint8Array, writer: BinaryWriter): void;
    static smallNumberEncoding(encoding: SmallIntegerType): [(value: number, buf: Uint8Array, offset: number) => void, number];
    static write(encoding: PrimitiveType): (value: number | bigint | string | boolean | string, writer: BinaryWriter) => void;
    finalize(): Uint8Array;
}
export declare class BinaryReader {
    _buf: Uint8Array;
    _offset: number;
    constructor(buf: Uint8Array);
    bool(): boolean;
    static bool(reader: BinaryReader): boolean;
    u8(): number;
    static u8(reader: BinaryReader): number;
    u16(): number;
    static u16(reader: BinaryReader): number;
    u32(): number;
    static u32(reader: BinaryReader): number;
    u64(): bigint;
    static u64(reader: BinaryReader): bigint;
    u128(): bigint;
    static u128(reader: BinaryReader): bigint;
    u256(): bigint;
    static u256(reader: BinaryReader): bigint;
    u512(): bigint;
    static u512(reader: BinaryReader): bigint;
    f32(): number;
    static f32(reader: BinaryReader): number;
    f64(): number;
    static f64(reader: BinaryReader): number;
    string(): string;
    static string(reader: BinaryReader): string;
    static bufferString(reader: BinaryReader): string;
    static bufferStringCustom(reader: BinaryReader, length: (reader: BinaryReader) => number): string;
    static stringCustom(reader: BinaryReader, length: (reader: BinaryReader) => number): string;
    static read(encoding: PrimitiveType, fromBuffer?: boolean): ((reader: BinaryReader) => number) | ((reader: BinaryReader) => bigint) | ((reader: BinaryReader) => boolean) | ((reader: BinaryReader) => string);
    buffer(len: number): Uint8Array;
    uint8Array(): Uint8Array;
    static uint8Array(reader: BinaryReader, size?: number): Uint8Array;
    readArray(fn: any): any[];
}
