import { BinaryReader, BinaryWriter } from "./binary.js";
import { AbstractType, Constructor, CustomField, SimpleField, StructKind } from "./types.js";
export * from "./binary.js";
export * from "./types.js";
export * from "./error.js";
/**
 * Serialize an object with @field(...) or @variant(...) decorators
 * @param obj
 * @returns bytes
 */
export declare function serialize(obj: any, writer?: BinaryWriter): Uint8Array;
/**
 * /// Deserializes object from bytes using schema.
 * @param buffer data
 * @param classType target Class
 * @param options options
 * @param options.unchecked if true then any remaining bytes after deserialization will be ignored
 * @param options.object no classes will be created, just plain js object
 * @param options.construct if true, constructors will be invoked on deserialization
 * @returns
 */
type DeserializeStructOptions = {
    unchecked?: boolean;
} & ({
    construct?: boolean;
} | {
    object?: boolean;
});
export declare function deserialize<T>(buffer: Uint8Array, classType: Constructor<T> | AbstractType<T>, options?: DeserializeStructOptions): T;
export declare function deserializeStruct(targetClazz: any, fromBuffer: boolean): (reader: BinaryReader, options?: DeserializeStructOptions) => any;
export declare const getDependencies: (ctor: Function, offset: number) => Function[] | undefined;
export declare const getAllDependencies: (ctor: Function, offset: number) => Map<Function, {
    schema: StructKind;
    offset: number;
}> | undefined;
export declare const getSchema: (ctor: Function, offset?: number) => StructKind;
export declare const getSchemasBottomUp: (ctor: Function) => StructKind[];
/**
 *
 * @param kind 'struct' or 'variant. 'variant' equivalnt to Rust Enum
 * @returns Schema decorator function for classes
 */
export declare const variant: (index: number | number[] | string) => (ctor: Function) => void;
/**
 * @param properties, the properties of the field mapping to schema
 * @returns
 */
export declare function field(properties: SimpleField | CustomField<any>): (target: {} | any, name?: PropertyKey) => any;
/**
 * @experimental
 * @param properties, the properties of the field mapping to schema
 * @returns
 */
export declare function serializer(): (target: any, propertyKey: string) => void;
/**
 * @param clazzes
 * @param validate, run validation?
 * @returns Schema map
 */
export declare const validate: (clazzes: Constructor<any> | Constructor<any>[], allowUndefined?: boolean) => void;
export declare const getDiscriminator: (constructor: Constructor<any>) => Uint8Array;
